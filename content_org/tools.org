#+HUGO_BASE_DIR: ../
#+HUGO_SECTION: Tools
#+FILETAGS: tools
#+HUGO: more
#+SEQ_TODO: TODO NEXT DRAFT DONE
#+HUGO_AUTO_SET_LASTMOD: t
#+LATEX_CLASS:cn-article
#+SETUPFILE: ~/.spacemacs.d/org-templates/math.org
* Tools
** NEXT Organize you life in Emacs Org  :Org:@tools:@Emacs:
   :PROPERTIES:
   :EXPORT_FILE_NAME: organize-you-life-in-org
   :EXPORT_DATE: <2018-02-04 Sun 20:45>
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :summary "My GTD workflow based on Emacs Org"
   :END:
   :LOGBOOK:
   CLOCK: [2018-02-04 Sun 20:50]--[2018-02-09 Fri 21:12] => 120:22
   CLOCK: [2018-02-04 Sun 20:46]--[2018-02-04 Sun 20:49] =>  0:03
   :END:
*** introduction

Using [[http://spacemacs.org/][spacemacs]] I divide my Org config into servel private layers for
the sake of easy maintenance and flexibility. You can check my
[[https://github.com/emacsun/.spacemacs.d][.spacemacs.d]] on github. I suggest you excerpt some of my config
instead of copying all of them because some of them maybe not what you
want.

Based on the comprehensive tutorial [[http://doc.norang.ca/org-mode.html][Organize Your Life In Plain Text]],
I build my own GTD system using Org. Actually, there exists quite a
few posts on building personal GTD system through Emacs Org. Some
excellent ones are listed as below:

   1. [[http://doc.norang.ca/org-mode.html][Organize Your Life In Plain Text]] . This article is the starting
      point of my serious using of Emacs Org as GTD tool. It is quite
      long, but deserves spending time to read it. It pays off.
      Furthermore, reading just one time is not enough. Perhaps you
      will visit this post several times before your GTD system is
      handy.
   2. [[http://newartisans.com/2007/08/using-org-mode-as-a-day-planner/][Using org-mode as a Day Planner]] . This article describe how the
      author replace pen-and-paper day planner with the Emacs Org.
      After trying many software available, the author choose Emacs
      Org.
   3. [[http://members.optusnet.com.au/~charles57/GTD/gtd_workflow.html][How I use Emacs and Org-mode to implement GTD]] . The author's job
      is developing classroom training materials and E-Learning
      solutions for a software company based in North Sydney. It's
      also worthwhile to give the article a shot.

   I am not interested in listing all the articles. What I want to say
   is that you need to define your need first. After that you can
   excerpt the config from other's implement. Most of the time you
   will modify other's config before Org is handy for you. So some
   knowledge of Elisp is desirable.
*** My GTD workflow
[2018-02-10 Sat 22:18]

First let me introduce my GTD workflow. In general, a task in my GTD
workflow will go the road shown as below whick is the same as show in
[[http://doc.norang.ca/org-mode.html][Organize Your Life In Plain Text]] but with different triggering
conditions:

#+CAPTION:  state transitions for a task in my workflow
#+ATTR_HTML:  :width 400 :align center
#+NAME: fig:20180210myworkflow
#+ATTR_LATEX: :width 0.6\textwidth :align center
[[../static/img/tools/20180210myworkflow.png]]

The main features are listed below.

1. Every moment, for the sake of clearing my head, I capture all the
   ideas or some todos jumping into my head during my handling one
   event. I will handle the capture later.
2. Every morning, I check the my agenda which is generated by a
   combination of ten commends.
3. I check the scheduled tasks and the tasks which is near the
   deadline.
4. After the scheduled one and the deadlined one, I take a =NEXT=
   task, which is in =NEXT= status. Also, I start a clock under such
   task.
5. After finished the =NEXT= tasks, the =NEXT= status will be changed
   to =DONE= automatically. Then I pick a new task in the =TODO= lists
   and change the =TODO= status into =NEXT=. Everytime I change a
   =TODO=  task into a =NEXT= task, clock is running under that task
   automatically.
6. After finished all the =TODO= tasks, I check the =DONE= list to see
   if there is any tasks need to be archived.
*** some preparations
[2018-02-10 Sat 22:37]

In order to run the GTD, some preparations are needed.

**** set the agenda file
[2018-02-10 Sat 21:43]

To use Org as a GTD tool, the first thing is to setup the
=org-agenda-files= ;
#+begin_src lisp
;;set up the agenda files
(setq org-agenda-files (list "~/zorg/Dropbox/base/zlife.org"
                             "~/zorg/Dropbox/base/zwork.org"
                             "~/zorg/Dropbox/base/zrefile.org"
                             "~/zorg/Dropbox/base/zdiary.org"
                             "~/zorg/Dropbox/base/ztimelog.org"))
#+end_src
As you can see, I put my configs into the Dropbox directory, so that
my config will never lose even if I delete them from the local
carelessly.

Notice that there is a file named "zrefile.org" which is the entrance
of all my todos and some other captures. It plays as an inbox.
Everytime I check this file and take actions to clean it. All this can
be done in the agenda buffer, which I will explain later. To refile
the items in the refile.org, I need to set up the refile targets.
**** set the refile targets
[2018-02-11 Sun 00:14]

#+begin_src lisp
(setq org-refile-targets (quote (
          ("~/zorg/Dropbox/base/zwork.org" :maxlevel . 6)
          ("~/zorg/Dropbox/base/zlife.org" :maxlevel . 6)
          ("~/zorg/zcl.space/content_org/math.org" :maxlevel . 6)
          ("~/zorg/zcl.space/content_org/computer.org" :maxlevel . 6)
          ("~/zorg/zcl.space/content_org/telecommunication.org" :maxlevel . 6)
          ("~/zorg/zcl.space/content_org/life.org" :maxlevel . 6)
          ("~/zorg/zcl.space/content_org/tools.org" :maxlevel . 6))))
#+end_src

Notice that, besides the zwork.org and zlife.org which are the agenda
files, there are other five org files. These five org files are for my
personal blog. Sometime, I capture a draft or outline of a new post in
the zrefile.org, so I need to refile these drafts into the right
category.

To understand why I add these extra five org files as the refile
targets, you need to see my =org-capture-templates=

**** set the org capture templates
[2018-02-11 Sun 00:23]

#+begin_src lisp
  (setq org-capture-templates
        '(
          ("t" "todo" entry (file "~/zorg/Dropbox/base/zrefile.org")
           "* TODO %? :TODO: \n Added:%T\n"
           :clock-in t :clock-resume t)
          ("h" "Hugo post")
          ("hm" "Math"
           entry (file+olp "~/zorg/zcl.space/content_org/math.org" "Math")
           (function org-hugo-new-subtree-post-capture-template)
           ":math:"
           :clock-in t :clock-resume t)
          ("hc" "Computer"
           entry (file+olp "~/zorg/zcl.space/content_org/computer.org" "Computer")
           (function org-hugo-new-subtree-post-capture-template)
           :clock-in t :clock-resume t)
          ("ht" "Telecommunication"
           entry (file+olp "~/zorg/zcl.space/content_org/telecommunication.org" "Telecommunication")
           (function org-hugo-new-subtree-post-capture-template)
           :clock-in t :clock-resume t)
          ("hl" "Life"
           entry (file+olp "~/zorg/zcl.space/content_org/life.org" "Life")
           (function org-hugo-new-subtree-post-capture-template)
           :clock-in t :clock-resume t)
          ("ho" "Tools"
           entry (file+olp "~/zorg/zcl.space/content_org/tools.org" "Tools")
           (function org-hugo-new-subtree-post-capture-template)
           :clock-in t :clock-resume t)
          ("hm" "movie"
           entry (file+olp "~/zorg/zcl.space/content_org/all-posts.org" "Movie")
           (function org-hugo-new-subtree-post-capture-template)
           :clock-in t :clock-resume t)
          ("hl" "life"
           entry (file+olp "~/zorg/zcl.space/content_org/all-posts.org" "Life")
           (function org-hugo-new-subtree-post-capture-template)
           :clock-in t :clock-resume t)
           ("l" "my Log Time" entry (file+datetree "~/zorg/Dropbox/base/ztimelog.org" ) "** %T - %?  :timelog:" :clock-in t :clock-resume t)
          ("d" "diary" entry (file+datetree "~/zorg/Dropbox/base/zdiary.org" ) "* %t - %?  :diary:" :clock-in t :clock-resume t)
          ("x" "org-protocol" entry (file "~/zorg/Dropbox/base/zrefile.org")
           "* TODO Review %c \n Added:%T\n")
          ))
#+end_src

I have a template for =zrefile.org= which is :
#+begin_src lisp
("t" "todo" entry (file "~/zorg/Dropbox/base/zrefile.org")
 "* TODO %? :TODO: \n Added:%T\n"
 :clock-in t :clock-resume t)
#+end_src
To understand the meaning of this template, you need to read the doc
for variable =org-capture-templates=.

whenever I check the org-agenda, I will see a block contains all the
need-to-refile tasks. So you may curious about my set of
=org-agenda-custom-commands=
**** set the org agenda custom commands
[2018-02-11 Sun 00:36]

#+begin_src lisp
(setq org-agenda-custom-commands
        (quote (
                (" " "Agenda"
                 ((agenda "" )
                  (tags "NOTES"
                        ((org-agenda-overriding-header "NOTES to Refile")
                         (org-tags-match-list-sublevels nil)))
                  (tags "REFILE"
                        ((org-agenda-overriding-header "Tasks to Refile")
                         (org-tags-match-list-sublevels nil)))
                  (tags-todo "-CANCELLED/!"
                             ((org-agenda-overriding-header "Stuck Projects")
                              (org-agenda-skip-function 'bh/skip-non-stuck-projects)
                              (org-agenda-sorting-strategy
                               '(priority-down category-keep))))
                  (tags-todo "-HOLD-CANCELLED/!"
                             ((org-agenda-overriding-header "Projects")
                              (org-agenda-skip-function 'bh/skip-non-projects)
                              (org-agenda-sorting-strategy
                               '(priority-down category-keep))))
                  (tags-todo "-CANCELLED/!NEXT"
                             ((org-agenda-overriding-header "Project NEXT Tasks")
                              (org-agenda-skip-function 'bh/skip-projects-and-habits-and-single-tasks)
                              (org-tags-match-list-sublevels t)
                              (org-agenda-sorting-strategy
                               '(priority-down todo-state-down effort-up category-keep))))
                  (todo "TODO"
                        ((org-agenda-overriding-header "Project Subtasks TODO")
                         (org-tags-match-list-sublevels t)))
                  (todo "DONE"
                        ((org-agenda-overriding-header "Project Subtasks DONE")
                         (org-tags-match-list-sublevels t)))
                  ;;;;(tags-todo "-CANCELLED+WAITING+HOLD/!"
                  (todo "HOLD"
                        ((org-agenda-overriding-header "Waiting and Postponed Tasks")
                         (org-agenda-skip-function 'bh/skip-stuck-projects)
                         (org-tags-match-list-sublevels nil)
                         (org-agenda-todo-ignore-scheduled 'future)
                         (org-agenda-todo-ignore-deadlines 'future)))
                  (tags "-REFILE/"
                        ((org-agenda-overriding-header "Tasks to Archive")
                         (org-agenda-skip-function 'bh/skip-non-archivable-tasks)
                         (org-tags-match-list-sublevels nil))))
                 nil))))
#+end_src

You should never copy the above snippet, because there are some
functions whose definitions are not contained in the snippet.
Actually, you should go to my Github page to get the repository if you
are interested in my .spacemacs.d

According to the command, one of the sample of my org agenda may look
like:
#+CAPTION:  my org agenda sample
#+ATTR_HTML:  :width 900 :align center
#+NAME: fig:20180210orgagenda
#+ATTR_LATEX: :width 0.6\textwidth :align center
[[../static/img/tools/20180210orgagenda.png]]

I have three projects: math,computer and communication
(telecommunication). For each projects, there are some tasks. All the
projects appear as level-1 headlines in the org file and the tasks
appear as sub-level headlines. If all the tasks under one project are
in =TODO= state, the project is stuck. If at least one of the task
under one project is in =NEXT= state, the project is running.

I think the structure of my agenda buffer is straightforward. you can
define your own =org-agenda-custom-commands= by reading the manual and
[[https://orgmode.org/worg/org-tutorials/org-custom-agenda-commands.html][this post]].


* Emacs
[2018-01-28 Sun 10:14]

** DONE Blogging with Emacs Org    :@tools:@Emacs:Org:Hugo:
CLOSED: [2018-01-28 Sun 18:01]
:PROPERTIES:
:EXPORT_FILE_NAME: my-blog-workflow
:EXPORT_DATE: <2018-01-28 Sun 10:49>
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :summary "My blog workflow based on Emacs Org"
:END:
:LOGBOOK:
- CLOSING NOTE [2018-01-28 Sun 18:01] \\
  first draft
  CLOCK: [2018-01-28 Sun 16:26]--[2018-01-28 Sun 17:55] =>  1:29
  CLOCK: [2018-01-28 Sun 10:49]--[2018-01-28 Sun 10:50] =>  0:01
:END:

Right Now, I use two blog systems to post articles. First, I use the Emacs
built-in Org to record my learning on math, computer and wireless
communication. For me, the built-in publishing system is obsolete (I am not
saying Org is obsolete. My life rely heavily on Org.) because I find the
second one is more interesting and flexible to config. The second one is
Hugo. Naturally, the Hugo support markdown format. However, I want to use
Emacs Org to maintain a tools consistency. Fortunately, there is [[https://ox-hugo.scripter.co/][ox-hugo]], a
project bridging Emacs org and Hugo markdown. Ox-hugo allows you to write
your blog using Emacs Org then publish them in the markdwon format
automatically.

*** Writing with Emacs Org publish

It's easy to build a static website using [[https://orgmode.org/manual/Publishing.html][Emacs Org]]. [[https://orgmode.org/worg/][Worg]], the Org-mode
community, also have comprehensive tutorials about using Org to build your
own static site. To be honest, worg should be every serious Org users'
starting point. So many Org experts contribute their summary of Org in
high-quality articles on the Worg.

In general, through Emacs Org mode, all you need is to set the variable
=org-publish-project-alist= . Of course, if you want your site beautiful,
some knowledge about CSS and JavaScript is necessary.


*** Writing with Hugo

Now, I moved from the Emacs built-in publishing system to Hugo because of
Hugo's efficiency and flexibility. You can build your static site in just a
few minutues. One major problem of the built-in publishing system is that
you have to wait for a long time as your site gets larger and larger. When
you have only several posts, there is no problem. However, when you have more
than one hundred posts, you want to kill yourself during waiting the
publishing.

Using Hugo, everything is easy. Post an article is at the fingure.However,
if you want to write a post, it is prioritized to finished it in the github
format markdown. For a guy who rarely use markdown and is familiar with
Emacs Org, this constraint is not human. Fortunately, [[https://github.com/kaushalmodi/ox-hugo][Ox-hugo]], a carefuly
crafted Org exporter backend for Hugo, is definitely worth a try. Ox-hugo
bridge the Emacs Org and Hugo and make the workflow at a fly. Even though,
Hugo supports to write the posts in Org format, Ox-hugo still is a sharp
tool which I will not give up and highly recommend it.

Especially, there is tons of themes for you. Also, you can set up your own
theme.

**** architecture of the site

Using =hugo= , there is a default architecture. Using =ox-hugo= , I store
the Org file in the subdirectory =content-org= . There are several sections
for my static site such =math= , =computer= and =communication= . I store
the articles in the corresponding category. For example I will put an
article on /mathematical analysis/ in the file named =content-org/math.org=
so that after exporting, the markdown file will be put in the subdirectory
=content/math/= .

#+CAPTION:  architecture of Hugo project
#+ATTR_HTML:  :width 400 :align center
#+NAME: fig:20180126HugoArchitecture
#+ATTR_LATEX: :width 0.6\textwidth :align center
[[../static/tools/20180126HugoArchitecture.png]]

*** Settings for ox-hugo
**** settings for each section based on ox-hugo

As mentioned before, there are several sections for my site and I use
ox-hugo to handle articles for this sections. In the subdirectory
=content-org/= , there are several =*.org= files such as =math.org= ,
=computer.org= , =communications.org= and =tools.org= . All these =.org=
files have multiple level-1 headlines. for each level-1 headline, there is
one article. I use one-post-per-Org-subtree style preferred in the ox-hugo
[[https://ox-hugo.scripter.co/][document]] but one-section-per-Org-file style for each section. The
one-section-per-Org-file style is kind of like one-post-per-Org-file
mentioned in the ox-hugo [[https://ox-hugo.scripter.co/][document]]. So I have a hybrid style.

For each section, I have to set some parameters properly so that the
articles goes to the right postion. Take =math.org= for example, the
beginning of this file is like:
#+begin_example
#+HUGO_BASE_DIR: ../
#+HUGO_SECTION: math
#+SEQ_TODO: TODO NEXT DRAFT DONE
#+FILETAGS: math
#+OPTIONS:   *:t <:nil timestamp:nil toc:t
#+HUGO_AUTO_SET_LASTMOD: t
#+end_example

1. the first line tells =ox-hugo= the targeting directory is =../content/= .
2. the second line tells =ox-hugo= the article goes to =../content/math= .
3. the third line is the Org state of the article, =TODO= will render the
   article a draft while =DONE= a finished post.
4. the fourth line will tell the Org all the headlines of this file has the
   tag =math=
5. at the fifth line. =*:t= will toggle emphasized text. =<:nil= means the
   timestamp will not be exported. =timestamp:nil= means the creation time
   will not be exported. =toc:t= means for the articles table of content is
   generated. More settings like these will be detailed in the =Org=
   manual. (You can open the Org manual by =C-h i= ,then seclect the Org
   section.) On table of contents, ox-hugo has an [[https://ox-hugo.scripter.co/doc/org-toc][article]].
6. the sixth line tells ox-hugo to export the latest time when the article
   is modified.
**** settings for each article based on ox-hugo

I use the =org-capture= to start a article. The emacs-lisp:
#+begin_src lisp
  (setq org-capture-templates
        '(
          ("t" "todo" entry (file "~/zorg/Dropbox/base/zrefile.org")
           "* TODO %? :TODO: \n Added:%T\n"
           :clock-in t :clock-resume t)
          ("h" "Hugo post")
          ("hm" "Math"
           entry (file+olp "~/zorg/zcl.space/content_org/math.org" "Math")
           (function org-hugo-new-subtree-post-capture-template)
           ":math:"
           :clock-in t :clock-resume t)
          ("hc" "Computer"
           entry (file+olp "~/zorg/zcl.space/content_org/computer.org" "Computer")
           (function org-hugo-new-subtree-post-capture-template)
           :clock-in t :clock-resume t)
          ("ht" "Telecommunication"
           entry (file+olp "~/zorg/zcl.space/content_org/telecommunication.org" "Telecommunication")
           (function org-hugo-new-subtree-post-capture-template)
           :clock-in t :clock-resume t)
          ("hl" "Life"
           entry (file+olp "~/zorg/zcl.space/content_org/life.org" "Life")
           (function org-hugo-new-subtree-post-capture-template)
           :clock-in t :clock-resume t)
          ("ho" "Tools"
           entry (file+olp "~/zorg/zcl.space/content_org/tools.org" "Tools")
           (function org-hugo-new-subtree-post-capture-template)
           :clock-in t :clock-resume t)
          ))
#+end_src
From the above code, you can see that I rely heavily on ox-hugo. there is one
function named =org-hugo-new-subtree-post-capture-template= which is shown
as below:
#+begin_src lisp
  (defun org-hugo-new-subtree-post-capture-template ()
    "Returns `org-capture' template string for new Hugo post.
See `org-capture-templates' for more information."
    (let* (;; http://www.holgerschurig.de/en/emacs-blog-from-org-to-hugo/
           (date (format-time-string (org-time-stamp-format  :inactive) (org-current-time)))
           (title (read-from-minibuffer "Post Title: ")) ;Prompt to enter the post title
           (fname (org-hugo-slug title)))
      (mapconcat #'identity
                 `(
                   ,(concat "* TODO " title)
                   ":PROPERTIES:"
                   ,(concat ":EXPORT_FILE_NAME: " fname)
                   ,(concat ":EXPORT_DATE: " date) ;Enter current date and time
                   ,(concat ":EXPORT_HUGO_CUSTOM_FRONT_MATTER+: "  ":summary \"summary\"")
                   ":END:"
                   "%?\n")          ;Place the cursor here finally
                 "\n")))
#+end_src

One more point, it is awesome to preview each article after saveing it.
Yes! you can do it according [[https://ox-hugo.scripter.co/doc/auto-export-on-saving][this article]].
*** Settings for Hugo themes

Now, there are more than 190+ [[https://themes.gohugo.io/][themes]] for Hugo. It is pretty straightforward
to [[https://gohugo.io/themes/][install and config]] a theme as you wish. I prefer the [[https://sourcethemes.com/academic/][Academic theme]] which I
adopt for the following reasons:
1. It is easy manage my post according to different categories.
2. I love the widget most.
3. support of $\mathrm{\LaTeX}$ so I can with the mathematical expressions
   fluently.
4. Responsive and mobile friendly.
5. easy to update.

   There are [[https://sourcethemes.com/academic/docs/install/][several ways]] to install the Academic theme. I use the Academic
   Kickstart way:
   #+begin_src shell
   git clone https://github.com/sourcethemes/academic-kickstart.git My_Website
   #+end_src

   The very reason I use the Kickstart way lies in the updatation of Academic.
   In the Kickstart way, Academic is installed as a Git sub-module.

   If you want to update the theme,all you have to do is:
   #+begin_src shell
   git submodule update --remote --merge
   #+end_src

   Also, for different methods of updating the theme, you can check [[https://sourcethemes.com/academic/docs/update/][here]].

* Git
[2018-01-28 Sun 10:14]
