#+TITLE: TOOLS
#+HUGO_BASE_DIR: ../
#+HUGO_SECTION: Tools
#+FILETAGS: tools
#+HUGO: more
#+SEQ_TODO: TODO NEXT DONE
#+HUGO_AUTO_SET_LASTMOD: t
#+SETUPFILE: ~/.spacemacs.d/org-templates/math.org


* TODO Tools
** TODO keys lead by space in spacemacs            :@Emacs:
:PROPERTIES:
:EXPORT_FILE_NAME: keys-lead-by-space-in-spacemacs
:EXPORT_DATE: <2018-02-24 Sat 21:49>
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :summary "summary"
:END:
:LOGBOOK:
CLOCK: [2018-02-24 Sat 21:49]--[2018-02-24 Sat 21:59] =>  0:10
:END:
Inspired by [[https://www.youtube.com/channel/UC9FdDIWaFP-4fHuQ7bhIT1Q][Eivind Fonn's]] spacemacs tutorial on Youtube, I think it is
desirable to go through the keystroke leading with =spc= by myself.
Actually, by doing this I learn quite more about spacemacs and improve
my productivity on using it. I also find that several expensive short
keystrokes are not being used and several expensive shortcuts are
assigned to commands that I rarely knocked.

All the keys in the following section are lead by =spc=.
*** =g= git/version control
[2018-02-24 Sat 23:23]

#+CAPTION: =spc g=
#+ATTR_HTML:  :width 600 :align center
#+NAME: fig:20180224git
#+ATTR_LATEX: :width 0.6\textwidth :align center
[[../static/img/tools/20180224git.png]]

| key | brief                           | comments                                |
|-----+---------------------------------+-----------------------------------------|
| =.=   |                                 |                                         |
| =b=   | git blame moicro state          | I seldomly use blame                    |
| =f h= | magit log buffile file          | useful to check the log of current file |
| =H c= | clear                           |                                         |
| =H h= | highlight by age of changes     |                                         |
| =H t= | highlith by last time of update |                                         |
| =I=   | helm git ignore                 |                                         |
| =l C= | git link commit copy url only   |                                         |
| =l c= | git link commit copy            |                                         |
| =l L= | git link copy url only          |                                         |
| =l l= | git link copy                   |                                         |
|     |                                 |                                         |
*** =i=  insert
[2018-02-24 Sat 23:37]

| key | brief                       | comments |
|-----+-----------------------------+----------|
| =J=   | insert line below no indent |          |
| =j=   | insert line below           |          |
| =K=   | insert line above no indent |          |
| =k=   | insert line above           |          |

I need to add more keys under =spc i= . This key prefix havs no so many
followers.
*** =j= jump/join/split
[2018-02-24 Sat 23:42]

| key | brief                                 | comments           |
|-----+---------------------------------------+--------------------|
| =$=   | push mark and go to end of line       |                    |
| =0=   | push mark and go to beginning of line |                    |
| =   | indent region or buffer               |                    |
| =b=   | avy mark pop                          |                    |
| =D=   | dired jump other window               |                    |
| =d=   | dired jump                            |                    |
| =f=   | find function                         |                    |
| =I=   | helm imenu in all buffers             |                    |
| =i=   | helm jump in buffer                   |                    |
| =J=   | avy go to 2chars                      |                    |
| =j=   | avy go to char                        |                    |
| =k=   | goto next line and indent             |                    |
| =l=   | avy goto line                         | current buffer     |
| =n=   | sp new line                           | split current line |
| =o=   | open line above                       |                    |
| =q=   | dumb jump quick look                  | never use it       |
| =S=   | split and new line                    | same as =spc j n=    |
| =s=   | split sexp                            |                    |
| =u=   | avy goto url                          |                    |
| =v=   | find variables                        |                    |
| =w=   | avy goto word                         |                    |
*** =k= lisp
[2018-02-25 Sun 00:05]
*** =l= layout transient state
[2018-02-25 Sun 00:06]
*** =m= major mode command
[2018-02-25 Sun 00:07]
*** =n= narror/numbers
[2018-02-25 Sun 00:07]
*** =o= prefix for org
[2018-02-25 Sun 00:08]
*** =p= projectile
[2018-02-25 Sun 00:08]
*** =P= run pandoc
[2018-02-25 Sun 00:09]

I'd like delete this command
*** =q= quit
[2018-02-25 Sun 00:10]
*** =r=
[2018-02-25 Sun 00:10]

I like helm-mark-ring and helm-yank-ring
*** =S= spell
[2018-02-25 Sun 00:12]
*** =s= search
[2018-02-25 Sun 00:12]
*** =t= toggles
[2018-02-25 Sun 00:12]

| keys | brief                     | comments  |
|------+---------------------------+-----------|
| =tab=  | tab indent guide globally | not clear |
| =-=    | centered point            |           |
| =8=    | highlight long lines      |           |
| =a=    | auto completion           |           |
|      |                           |           |

*** =T= UI toggles/themes
[2018-02-25 Sun 00:13]
*** =v= expand region
[2018-02-25 Sun 00:14]
*** =w= windows
[2018-02-25 Sun 00:14]
*** =x= text
[2018-02-25 Sun 00:15]
*** =z= zoom
[2018-02-25 Sun 00:15]
** TODO Link in Emacs Org Mode                 :@Emacs:Org:
:PROPERTIES:
:EXPORT_FILE_NAME: link-in-emacs-org-mode
:EXPORT_DATE: <2018-02-25 Sun 10:30>
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :summary "summary"
:END:
:LOGBOOK:
CLOCK: [2018-02-25 Sun 10:31]--[2018-02-25 Sun 11:13] =>  0:42
:END:

Today, I am going to write something about link in Emacs Org mode. I
have to admit in advance that I don't know all about Org's link.
However, the part I know about Org link has already made my life much more
efficient.
** DRAFT Extends Emacs Org Mode on iOS Device  :@Emacs:Org:
:PROPERTIES:
:EXPORT_FILE_NAME: using-emacs-org-mode-on-ios-device
:EXPORT_DATE: <2018-02-25 Sun 11:12>
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :summary "summary"
:END:
:LOGBOOK:
CLOCK: [2018-02-25 Sun 12:57]--[2018-02-25 Sun 14:43] =>  1:46
CLOCK: [2018-02-25 Sun 11:13]--[2018-02-25 Sun 12:38] =>  1:25
:END:

I use two APPs [[https://itunes.apple.com/us/app/beorg/id1238649962?mt=8][BeOrg]] and [[https://itunes.apple.com/us/app/drafts-quick-capture/id905337691?mt=8][Drafts]] as Org's extension on my iOS device.
Oh, almost foget it. Another one: dropbox. Beorg and Drafts stores the
captures of ideas into dropbox. I retrive them when I am home on
Windows 10 using my Surface Pro.

The relationship among all the APPs I mentioned above is like

#+CAPTION:  My using of Org mode through mobile device
#+ATTR_HTML:  :width 600 :align center
#+NAME: fig:20180225orgmobile
#+ATTR_LATEX: :width 0.6\textwidth :align center
[[../static/img/tools/20180225orgmobile.png]]

Actually, I also tried another APP named MobileOrg, but dislike it
because of its inflexibility ,boring GUI and hard-to-config. The
combination of Beorg and Drafts works well for me with their playing
each's own role.

*** BeOrg
[2018-02-25 Sun 11:14]

Using BeOrg, I only capture a TODO. I leave capturing a note to Drafts
which is good at notes.

One screenshot of Beorg is shown as:

[[../static/img/tools/20180225beorg.png]]

The green button is used to add a todo capture. As you can see, Beorg
can also read the todos from your iOS calendar (I am sorry for whom
cannot read Chinese. That item in Chinese comes from iOS calendar
reminding me to pick up the magazines and newspaper).

By default, Beorg display the week agenda. The TODO states are also
can be customized. I set the file synchronization method as dropbox
and set the org directory which is shared with Drafts and my windows.
So I can keep the org files consistent.

Beorg also has an option for quick capture. Naturally, I also set it
as the inbox of my Org mode on Drafts and Windows. You can also
control the vivibility of your iOS calendars, i.e. which part shoule
be integrated into BeOrg agenda view, the family? personal? work? You
name it, as you wish.

*** Drafts
[2018-02-25 Sun 11:17]

Drafts is the most efficient tool for taking a note. All you need is
to focus on writing. Furthermore, you can even export your notes to
way many other APPs such as evernote, markdown, oneDrive, google drive
and so on. There are tons of commands available on the [[http://drafts4-actions.agiletortoise.com/][action
directory of Drafts]].

Combined with dropbox, I config several commands of my own. One
screenshot is like:

[[../static/img/tools/20180225drafts.png]]

Take my command =Drafts TODO BeOrg= for example, the step is append
files on Dropbox and the content is shown as:

#+begin_example
 * TODO  [[title]]
SCHEDULED: <[[created|%Y-%m-%d %a]]>
[[body]]
#+end_example

Notice that, I set the format of creating timestamp the same as Emacs
Org so that Emacs Org can follow the todo from Drafts.

Of course, you can define your own command in Drafts just read the document.

*** Dropbox
[2018-02-25 Sun 11:17]

The configuration of Dropbox is easy. All you have todo is to put the
org files in a directory where Beorg, Drafts and Windows knows.



* TODO Emacs
[2018-01-28 Sun 10:14]

** DONE Blogging with Emacs Org    :@tools:@Emacs:Org:Hugo:
CLOSED: [2018-01-28 Sun 18:01]
:PROPERTIES:
:EXPORT_FILE_NAME: my-blog-workflow
:EXPORT_DATE: <2018-01-28 Sun 10:49>
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :summary "My blog workflow based on Emacs Org"
:END:
:LOGBOOK:
- CLOSING NOTE [2018-01-28 Sun 18:01] \\
  first draft
  CLOCK: [2018-01-28 Sun 16:26]--[2018-01-28 Sun 17:55] =>  1:29
  CLOCK: [2018-01-28 Sun 10:49]--[2018-01-28 Sun 10:50] =>  0:01
:END:

Right Now, I use two blog systems to post articles. First, I use the Emacs
built-in Org to record my learning on math, computer and wireless
communication. For me, the built-in publishing system is obsolete (I am not
saying Org is obsolete. My life rely heavily on Org.) because I find the
second one is more interesting and flexible to config. The second one is
Hugo. Naturally, the Hugo support markdown format. However, I want to use
Emacs Org to maintain a tools consistency. Fortunately, there is [[https://ox-hugo.scripter.co/][ox-hugo]], a
project bridging Emacs org and Hugo markdown. Ox-hugo allows you to write
your blog using Emacs Org then publish them in the markdwon format
automatically.

*** Writing with Emacs Org publish

It's easy to build a static website using [[https://orgmode.org/manual/Publishing.html][Emacs Org]]. [[https://orgmode.org/worg/][Worg]], the Org-mode
community, also have comprehensive tutorials about using Org to build your
own static site. To be honest, worg should be every serious Org users'
starting point. So many Org experts contribute their summary of Org in
high-quality articles on the Worg.

In general, through Emacs Org mode, all you need is to set the variable
=org-publish-project-alist= . Of course, if you want your site beautiful,
some knowledge about CSS and JavaScript is necessary.


*** Writing with Hugo

Now, I moved from the Emacs built-in publishing system to Hugo because of
Hugo's efficiency and flexibility. You can build your static site in just a
few minutues. One major problem of the built-in publishing system is that
you have to wait for a long time as your site gets larger and larger. When
you have only several posts, there is no problem. However, when you have more
than one hundred posts, you want to kill yourself during waiting the
publishing.

Using Hugo, everything is easy. Post an article is at the fingure.However,
if you want to write a post, it is prioritized to finished it in the github
format markdown. For a guy who rarely use markdown and is familiar with
Emacs Org, this constraint is not human. Fortunately, [[https://github.com/kaushalmodi/ox-hugo][Ox-hugo]], a carefuly
crafted Org exporter backend for Hugo, is definitely worth a try. Ox-hugo
bridge the Emacs Org and Hugo and make the workflow at a fly. Even though,
Hugo supports to write the posts in Org format, Ox-hugo still is a sharp
tool which I will not give up and highly recommend it.

Especially, there is tons of themes for you. Also, you can set up your own
theme.

**** architecture of the site

Using =hugo= , there is a default architecture. Using =ox-hugo= , I store
the Org file in the subdirectory =content-org= . There are several sections
for my static site such =math= , =computer= and =communication= . I store
the articles in the corresponding category. For example I will put an
article on /mathematical analysis/ in the file named =content-org/math.org=
so that after exporting, the markdown file will be put in the subdirectory
=content/math/= .

#+CAPTION:  architecture of Hugo project
#+ATTR_HTML:  :width 400 :align center
#+NAME: fig:20180126HugoArchitecture
#+ATTR_LATEX: :width 0.6\textwidth :align center
[[../static/tools/20180126HugoArchitecture.png]]

*** Settings for ox-hugo
**** settings for each section based on ox-hugo

As mentioned before, there are several sections for my site and I use
ox-hugo to handle articles for this sections. In the subdirectory
=content-org/= , there are several =*.org= files such as =math.org= ,
=computer.org= , =communications.org= and =tools.org= . All these =.org=
files have multiple level-1 headlines. for each level-1 headline, there is
one article. I use one-post-per-Org-subtree style preferred in the ox-hugo
[[https://ox-hugo.scripter.co/][document]] but one-section-per-Org-file style for each section. The
one-section-per-Org-file style is kind of like one-post-per-Org-file
mentioned in the ox-hugo [[https://ox-hugo.scripter.co/][document]]. So I have a hybrid style.

For each section, I have to set some parameters properly so that the
articles goes to the right postion. Take =math.org= for example, the
beginning of this file is like:
#+begin_example
#+HUGO_BASE_DIR: ../
#+HUGO_SECTION: math
#+SEQ_TODO: TODO NEXT DRAFT DONE
#+FILETAGS: math
#+OPTIONS:   *:t <:nil timestamp:nil toc:t
#+HUGO_AUTO_SET_LASTMOD: t
#+end_example

1. the first line tells =ox-hugo= the targeting directory is =../content/= .
2. the second line tells =ox-hugo= the article goes to =../content/math= .
3. the third line is the Org state of the article, =TODO= will render the
   article a draft while =DONE= a finished post.
4. the fourth line will tell the Org all the headlines of this file has the
   tag =math=
5. at the fifth line. =*:t= will toggle emphasized text. =<:nil= means the
   timestamp will not be exported. =timestamp:nil= means the creation time
   will not be exported. =toc:t= means for the articles table of content is
   generated. More settings like these will be detailed in the =Org=
   manual. (You can open the Org manual by =C-h i= ,then seclect the Org
   section.) On table of contents, ox-hugo has an [[https://ox-hugo.scripter.co/doc/org-toc][article]].
6. the sixth line tells ox-hugo to export the latest time when the article
   is modified.
**** settings for each article based on ox-hugo

I use the =org-capture= to start a article. The emacs-lisp:
#+begin_src lisp
  (setq org-capture-templates
        '(
          ("t" "todo" entry (file "~/zorg/Dropbox/base/zrefile.org")
           "* TODO %? :TODO: \n Added:%T\n"
           :clock-in t :clock-resume t)
          ("h" "Hugo post")
          ("hm" "Math"
           entry (file+olp "~/zorg/zcl.space/content_org/math.org" "Math")
           (function org-hugo-new-subtree-post-capture-template)
           ":math:"
           :clock-in t :clock-resume t)
          ("hc" "Computer"
           entry (file+olp "~/zorg/zcl.space/content_org/computer.org" "Computer")
           (function org-hugo-new-subtree-post-capture-template)
           :clock-in t :clock-resume t)
          ("ht" "Telecommunication"
           entry (file+olp "~/zorg/zcl.space/content_org/telecommunication.org" "Telecommunication")
           (function org-hugo-new-subtree-post-capture-template)
           :clock-in t :clock-resume t)
          ("hl" "Life"
           entry (file+olp "~/zorg/zcl.space/content_org/life.org" "Life")
           (function org-hugo-new-subtree-post-capture-template)
           :clock-in t :clock-resume t)
          ("ho" "Tools"
           entry (file+olp "~/zorg/zcl.space/content_org/tools.org" "Tools")
           (function org-hugo-new-subtree-post-capture-template)
           :clock-in t :clock-resume t)
          ))
#+end_src
From the above code, you can see that I rely heavily on ox-hugo. there is one
function named =org-hugo-new-subtree-post-capture-template= which is shown
as below:
#+begin_src lisp
  (defun org-hugo-new-subtree-post-capture-template ()
    "Returns `org-capture' template string for new Hugo post.
See `org-capture-templates' for more information."
    (let* (;; http://www.holgerschurig.de/en/emacs-blog-from-org-to-hugo/
           (date (format-time-string (org-time-stamp-format  :inactive) (org-current-time)))
           (title (read-from-minibuffer "Post Title: ")) ;Prompt to enter the post title
           (fname (org-hugo-slug title)))
      (mapconcat #'identity
                 `(
                   ,(concat "* TODO " title)
                   ":PROPERTIES:"
                   ,(concat ":EXPORT_FILE_NAME: " fname)
                   ,(concat ":EXPORT_DATE: " date) ;Enter current date and time
                   ,(concat ":EXPORT_HUGO_CUSTOM_FRONT_MATTER+: "  ":summary \"summary\"")
                   ":END:"
                   "%?\n")          ;Place the cursor here finally
                 "\n")))
#+end_src

One more point, it is awesome to preview each article after saveing it.
Yes! you can do it according [[https://ox-hugo.scripter.co/doc/auto-export-on-saving][this article]].
*** Settings for Hugo themes

Now, there are more than 190+ [[https://themes.gohugo.io/][themes]] for Hugo. It is pretty straightforward
to [[https://gohugo.io/themes/][install and config]] a theme as you wish. I prefer the [[https://sourcethemes.com/academic/][Academic theme]] which I
adopt for the following reasons:
1. It is easy manage my post according to different categories.
2. I love the widget most.
3. support of $\mathrm{\LaTeX}$ so I can with the mathematical expressions
   fluently.
4. Responsive and mobile friendly.
5. easy to update.

   There are [[https://sourcethemes.com/academic/docs/install/][several ways]] to install the Academic theme. I use the Academic
   Kickstart way:
   #+begin_src shell
   git clone https://github.com/sourcethemes/academic-kickstart.git My_Website
   #+end_src

   The very reason I use the Kickstart way lies in the updatation of Academic.
   In the Kickstart way, Academic is installed as a Git sub-module.

   If you want to update the theme,all you have to do is:
   #+begin_src shell
   git submodule update --remote --merge
   #+end_src

   Also, for different methods of updating the theme, you can check [[https://sourcethemes.com/academic/docs/update/][here]].

** DONE Organize you life in Emacs Org  :Org:@tools:@Emacs:
CLOSED: [2018-02-11 Sun 21:52]
   :PROPERTIES:
   :EXPORT_FILE_NAME: organize-you-life-in-org
   :EXPORT_DATE: <2018-02-04 Sun 20:45>
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :summary "My GTD workflow based on Emacs Org"
   :END:
   :LOGBOOK:
   CLOCK: [2018-02-20 Tue 09:09]--[2018-02-20 Tue 09:10] =>  0:01
   CLOCK: [2018-02-19 Mon 15:45]--[2018-02-19 Mon 16:10] =>  0:25
   CLOCK: [2018-02-19 Mon 15:15]--[2018-02-19 Mon 15:16] =>  0:01
   CLOCK: [2018-02-04 Sun 20:50]--[2018-02-04 Fri 21:12] =>  0:22
   CLOCK: [2018-02-04 Sun 20:46]--[2018-02-04 Sun 20:49] =>  0:03
   :END:
*** introduction

Using [[http://spacemacs.org/][spacemacs]] I divide my Org config into servel private layers for
the sake of easy maintenance and flexibility. You can check my
[[https://github.com/emacsun/.spacemacs.d][.spacemacs.d]] on github. I suggest you excerpt some of my config
instead of copying all of them because some of them maybe not what you
want.

Based on the comprehensive tutorial [[http://doc.norang.ca/org-mode.html][Organize Your Life In Plain Text]],
I build my own GTD system using Org. Actually, there exists quite a
few posts on building personal GTD system through Emacs Org. Some
excellent ones are listed as below:

   1. [[http://doc.norang.ca/org-mode.html][Organize Your Life In Plain Text]] . This article is the starting
      point of my serious using of Emacs Org as GTD tool. It is quite
      long, but deserves spending time to read it. It pays off.
      Furthermore, reading just one time is not enough. Perhaps you
      will visit this post several times before your GTD system is
      handy.
   2. [[http://newartisans.com/2007/08/using-org-mode-as-a-day-planner/][Using org-mode as a Day Planner]] . This article describe how the
      author replace pen-and-paper day planner with the Emacs Org.
      After trying many software available, the author choose Emacs
      Org.
   3. [[http://members.optusnet.com.au/~charles57/GTD/gtd_workflow.html][How I use Emacs and Org-mode to implement GTD]] . The author's job
      is developing classroom training materials and E-Learning
      solutions for a software company based in North Sydney. It's
      also worthwhile to give the article a shot.

   I am not interested in listing all the articles. What I want to say
   is that you need to define your need first. After that you can
   excerpt the config from other's implement. Most of the time you
   will modify other's config before Org is handy for you. So some
   knowledge of Elisp is desirable.
*** My GTD workflow
[2018-02-10 Sat 22:18]

First let me introduce my GTD workflow. In general, a task in my GTD
workflow will go the road shown as below whick is the same as show in
[[http://doc.norang.ca/org-mode.html][Organize Your Life In Plain Text]] but with different triggering
conditions:

#+CAPTION:  state transitions for a task in my workflow
#+ATTR_HTML:  :width 400 :align center
#+NAME: fig:20180210myworkflow
#+ATTR_LATEX: :width 0.6\textwidth :align center
[[../static/img/tools/20180210myworkflow.png]]

The main features are listed below.

1. Every moment, for the sake of clearing my head, I capture all the
   ideas or some todos jumping into my head during my handling one
   event. I will handle the capture later.
2. Every morning, I check the my agenda which is generated by a
   combination of ten commends.
3. I check the scheduled tasks and the tasks which is near the
   deadline.
4. After the scheduled one and the deadlined one, I take a =NEXT=
   task, which is in =NEXT= status. Also, I start a clock under such
   task.
5. After finishing the =NEXT= tasks, the =NEXT= status will be changed
   to =DONE= automatically. Then I pick a new task in the =TODO= lists
   and change the =TODO= status into =NEXT=. Everytime I change a
   =TODO=  task into a =NEXT= task, clock is running under that task
   automatically.
6. After finishing all the =TODO= tasks, I check the =DONE= list to see
   if there is any tasks need to be archived.
*** some preparations
[2018-02-10 Sat 22:37]

In order to run the GTD, some preparations are needed.

**** set the agenda file
[2018-02-10 Sat 21:43]

To use Org as a GTD tool, the first thing is to setup the
=org-agenda-files= ;
#+begin_src lisp
;;set up the agenda files
(setq org-agenda-files (list "~/zorg/Dropbox/base/zlife.org"
                             "~/zorg/Dropbox/base/zwork.org"
                             "~/zorg/Dropbox/base/zrefile.org"
                             "~/zorg/Dropbox/base/zdiary.org"
                             "~/zorg/Dropbox/base/ztimelog.org"))
#+end_src
As you can see, I put my configs into the Dropbox directory, so that
my config will never lose even if I delete them from the local
carelessly.

Notice that there is a file named "zrefile.org" which is the entrance
of all my todos and some other captures. It plays as an inbox.
Everytime I check this file and take actions to clean it. All this can
be done in the agenda buffer, which I will explain later. To refile
the items in the refile.org, I need to set up the refile targets.
**** set the refile targets
[2018-02-11 Sun 00:14]

#+begin_src lisp
(setq org-refile-targets (quote (
          ("~/zorg/Dropbox/base/zwork.org" :maxlevel . 6)
          ("~/zorg/Dropbox/base/zlife.org" :maxlevel . 6)
          ("~/zorg/zcl.space/content_org/math.org" :maxlevel . 6)
          ("~/zorg/zcl.space/content_org/computer.org" :maxlevel . 6)
          ("~/zorg/zcl.space/content_org/telecommunication.org" :maxlevel . 6)
          ("~/zorg/zcl.space/content_org/life.org" :maxlevel . 6)
          ("~/zorg/zcl.space/content_org/tools.org" :maxlevel . 6))))
#+end_src

Notice that, besides the zwork.org and zlife.org which are the agenda
files, there are other five org files. These five org files are for my
personal blog. Sometime, I capture a draft or outline of a new post in
the zrefile.org, so I need to refile these drafts into the right
category.

To understand why I add these extra five org files as the refile
targets, you need to see my =org-capture-templates=

**** set the org capture templates
[2018-02-11 Sun 00:23]

#+begin_src lisp
  (setq org-capture-templates
        '(
          ("t" "todo" entry (file "~/zorg/Dropbox/base/zrefile.org")
           "* TODO %? :TODO: \n Added:%T\n"
           :clock-in t :clock-resume t)
          ("h" "Hugo post")
          ("hm" "Math"
           entry (file+olp "~/zorg/zcl.space/content_org/math.org" "Math")
           (function org-hugo-new-subtree-post-capture-template)
           ":math:"
           :clock-in t :clock-resume t)
          ("hc" "Computer"
           entry (file+olp "~/zorg/zcl.space/content_org/computer.org" "Computer")
           (function org-hugo-new-subtree-post-capture-template)
           :clock-in t :clock-resume t)
          ("ht" "Telecommunication"
           entry (file+olp "~/zorg/zcl.space/content_org/telecommunication.org" "Telecommunication")
           (function org-hugo-new-subtree-post-capture-template)
           :clock-in t :clock-resume t)
          ("hl" "Life"
           entry (file+olp "~/zorg/zcl.space/content_org/life.org" "Life")
           (function org-hugo-new-subtree-post-capture-template)
           :clock-in t :clock-resume t)
          ("ho" "Tools"
           entry (file+olp "~/zorg/zcl.space/content_org/tools.org" "Tools")
           (function org-hugo-new-subtree-post-capture-template)
           :clock-in t :clock-resume t)
          ("hm" "movie"
           entry (file+olp "~/zorg/zcl.space/content_org/all-posts.org" "Movie")
           (function org-hugo-new-subtree-post-capture-template)
           :clock-in t :clock-resume t)
          ("hl" "life"
           entry (file+olp "~/zorg/zcl.space/content_org/all-posts.org" "Life")
           (function org-hugo-new-subtree-post-capture-template)
           :clock-in t :clock-resume t)
           ("l" "my Log Time" entry (file+datetree "~/zorg/Dropbox/base/ztimelog.org" ) "** %T - %?  :timelog:" :clock-in t :clock-resume t)
          ("d" "diary" entry (file+datetree "~/zorg/Dropbox/base/zdiary.org" ) "* %t - %?  :diary:" :clock-in t :clock-resume t)
          ("x" "org-protocol" entry (file "~/zorg/Dropbox/base/zrefile.org")
           "* TODO Review %c \n Added:%T\n")
          ))
#+end_src

I have a template for =zrefile.org= which is :
#+begin_src lisp
("t" "todo" entry (file "~/zorg/Dropbox/base/zrefile.org")
 "* TODO %? :TODO: \n Added:%T\n"
 :clock-in t :clock-resume t)
#+end_src
To understand the meaning of this template, you need to read the doc
for variable =org-capture-templates=.

whenever I check the org-agenda, I will see a block contains all the
need-to-refile tasks. So you may curious about my set of
=org-agenda-custom-commands=
**** set the org agenda custom commands
[2018-02-11 Sun 00:36]

#+begin_src lisp
(setq org-agenda-custom-commands
        (quote (
                (" " "Agenda"
                 ((agenda "" )
                  (tags "NOTES"
                        ((org-agenda-overriding-header "NOTES to Refile")
                         (org-tags-match-list-sublevels nil)))
                  (tags "REFILE"
                        ((org-agenda-overriding-header "Tasks to Refile")
                         (org-tags-match-list-sublevels nil)))
                  (tags-todo "-CANCELLED/!"
                             ((org-agenda-overriding-header "Stuck Projects")
                              (org-agenda-skip-function 'bh/skip-non-stuck-projects)
                              (org-agenda-sorting-strategy
                               '(priority-down category-keep))))
                  (tags-todo "-HOLD-CANCELLED/!"
                             ((org-agenda-overriding-header "Projects")
                              (org-agenda-skip-function 'bh/skip-non-projects)
                              (org-agenda-sorting-strategy
                               '(priority-down category-keep))))
                  (tags-todo "-CANCELLED/!NEXT"
                             ((org-agenda-overriding-header "Project NEXT Tasks")
                              (org-agenda-skip-function 'bh/skip-projects-and-habits-and-single-tasks)
                              (org-tags-match-list-sublevels t)
                              (org-agenda-sorting-strategy
                               '(priority-down todo-state-down effort-up category-keep))))
                  (todo "TODO"
                        ((org-agenda-overriding-header "Project Subtasks TODO")
                         (org-tags-match-list-sublevels t)))
                  (todo "DONE"
                        ((org-agenda-overriding-header "Project Subtasks DONE")
                         (org-tags-match-list-sublevels t)))
                  ;;;;(tags-todo "-CANCELLED+WAITING+HOLD/!"
                  (todo "HOLD"
                        ((org-agenda-overriding-header "Waiting and Postponed Tasks")
                         (org-agenda-skip-function 'bh/skip-stuck-projects)
                         (org-tags-match-list-sublevels nil)
                         (org-agenda-todo-ignore-scheduled 'future)
                         (org-agenda-todo-ignore-deadlines 'future)))
                  (tags "-REFILE/"
                        ((org-agenda-overriding-header "Tasks to Archive")
                         (org-agenda-skip-function 'bh/skip-non-archivable-tasks)
                         (org-tags-match-list-sublevels nil))))
                 nil))))
#+end_src

You should never copy the above snippet, because there are some
functions whose definitions are not contained in the snippet.
Actually, you should go to my Github page to get the repository if you
are interested in my .spacemacs.d

According to the command, one of the sample of my org agenda may look
like:
#+CAPTION:  my org agenda sample
#+ATTR_HTML:  :width 900 :align center
#+NAME: fig:20180210orgagenda
#+ATTR_LATEX: :width 0.6\textwidth :align center
[[../static/img/tools/20180210orgagenda.png]]

I have three projects: math,computer and communication
(telecommunication). For each projects, there are some tasks. All the
projects appear as level-1 headlines in the org file and the tasks
appear as sub-level headlines. If all the tasks under one project are
in =TODO= state, the project is stuck. If at least one of the task
under one project is in =NEXT= state, the project is running.

I think the structure of my agenda buffer is straightforward. you can
define your own =org-agenda-custom-commands= by reading the manual and
[[https://orgmode.org/worg/org-tutorials/org-custom-agenda-commands.html][this post]].
*** One day based on my workflow
[2018-02-11 Sun 20:46]
**** Punch In
:LOGBOOK:
CLOCK: [2018-02-11 Sun 20:48]--[2018-02-11 Sun 20:49] =>  0:01
:END:
[2018-02-11 Sun 20:46]

At the beginning of every day, I use =F8 I= to punch in, which starts
a clock under a task called Organization:
#+begin_src lisp
(defvar bh/organization-task-id "eb155a82-92b2-4f25-a3c6-0304591af2f9")
#+end_src
**** check out the agenda
[2018-02-11 Sun 20:51]

Check out the agenda, using =org-agenda= which is bound to =SPC a o o
SPC= or =SPC o a SPC= or =F5 SPC= . Because the =org-agenda= buffer
will be visited quite a few times, I bind this command to several
shortcuts. Using the customed command =SPC= , I collect all the
projects,  tasks with =TODO= and =NEXT= states in the project which
give me an overview of what should be done next and what should be
started next.

#+CAPTION:  my org agenda overview
#+ATTR_HTML:  :width 900 :align center
#+NAME: fig:20180210orgagenda2
#+ATTR_LATEX: :width 0.6\textwidth :align center
[[../static/img/tools/20180210orgagenda2.png]]

As we can see from the screenshot, the agenda of today is listed at
the beginning with scheduled task and deadline task.

Following today's agenda, several blocks are displayed with each
headline in green color and large font size. Those blocks shows:
1. *Notes to Refile*, which is the draft of a post which should be
   refile to math.org computer.org or telecommunication.org.
2. *Tasks to Refile*, which is the Ideas or tasks hitting my head
   during handling one tasks. I store these tasks in zrefile.org then
   process them later after finishing current tasks.
3. *Stuck Projects*, which are the projects have no sub-tasks in
   =NEXT= state.
4. *Projects*, which are the projects have at least one sub-tasks in
   =NEXT= state.
5. *Project Next Tasks*, which are =NEXT= sub-tasks in all Projects.
   In particular, you can filter out the =NEXT= tasks belonging to
   certain project.
6. *Project Subtasks TODO*, which are all the =TODO= sub-tasks
   belonging to all projects.
7. *Project Subtasks DONE*, which are all the =DONE= sub-tasks
   belonging to all projects.
8. *Waiting and Postponed Tasks*, which are all the tasks in =WAITING=
   and =HOLD= state.
9. *Tasks to Archive*, which are the tasks being tagged as =DONE= for
   a period and need to be archived.

**** focus on certain project
[2018-02-11 Sun 21:20]

If you have many =TODO= tasks, it is desirable to focus on certain
project at one time. Just move the cursor on the Project you want to
focus, then press =^= . If you want to focus on another project, press
=^= again then select another project, press =^=.


#+CAPTION:  focus on certain project
#+ATTR_HTML:  :width 900 :align center
#+NAME: fig:20180210orgagenda
#+ATTR_LATEX: :width 0.6\textwidth :align center
[[../static/img/tools/20180210orgagenda3.png]]

Actually, there are quite a few commands helping you coin your own
view of the agenda buffer. some handy are listed below:
#+CAPTION: some handy agenda commands
#+NAME: tab:20180211handyagendacommand
#+ATTR_HTML: :border 1 :rules all :frame border :align left
#+ATTR_LATEX: :align |l|l|l|
|-----------+-----------------------------------+----------------------------------------------------------------------------------------------------------|
| shortcuts | command                           | description                                                                                              |
|-----------+-----------------------------------+----------------------------------------------------------------------------------------------------------|
| =/=       | org-agenda-filter-by-tag          | Filter the agenda view with respect to a tag                                                             |
| =<=       | org-agenda-filter-by-category     | Filter the current agenda view with respect to the category of the item at point                         |
| =^=       | org-agenda-filter-by-top-headline | Filter the current agenda view and only display the siblings and the parent headline of the one at point |
| ===       | org-agenda-filter-by-regexp       | Filter the agenda view by a regular expression                                                           |
| =_=       | org-agenda-filter-by-effort       | filter the agenda view with respect to effort estimates                                                  |
|-----------+-----------------------------------+----------------------------------------------------------------------------------------------------------|

You can find more agenda commands by reading =Agenda views= part of
the Org manual which is built in the Emacs.
**** change the state of one task
[2018-02-11 Sun 21:38]

It is quite easy to change the state of one task. By default, the
state is in =TODO= state. After start clocking the task, the task will
be in =NEXT= state automatically.

From =NEXT= to other state, you just use =C-c C-t= . If you are in the
org agenda buffer, press =t= one the line of the task.

Once the task is set as =DONE= , a temporary buffer will jump out and
let you take some note to record the task.
**** using the mobile phone to take capture
[2018-02-11 Sun 21:43]

In general, there are two app one is =Org-mobile= and the another one
is =BeOrg=. I prefer to the later because of is easy to use. All you
have to do is put your agenda files in a Dropbox directory.

=Org-mobile= is kind of complex, and need to config both on the phone
and the PC. I finally make it run on both my iPhone and Surface pro 4.
However, I resort to =BeOrg= because you will never forget how to use
=BeOrg= . Unfortunately, I forget how to use =Org-mobile= after I did
not use it for a month.

*** conclusion
[2018-02-11 Sun 21:43]

My GTD workflow based on Org is summarized. To be honest, I change my
workflow quite often. So the configuration will change subsequently
which is the source of joy using Emacs. You can always config it as
handy as possible.


** DONE Using Emacs as a calculator through Cals :calc:@Emacs:
CLOSED: [2018-02-20 Tue 17:13]
   :PROPERTIES:
   :EXPORT_FILE_NAME: calc-in-emacs
   :EXPORT_DATE: <2018-02-19 Mon 15:15>
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :summary "Summary of my use of Calc as a calculator"
   :END:
   :LOGBOOK:
   - CLOSING NOTE [2018-02-20 Tue 17:13] \\
     done with a draft version.
   CLOCK: [2018-02-20 Tue 16:05]--[2018-02-20 Tue 17:13] =>  1:08
   CLOCK: [2018-02-20 Tue 13:35]--[2018-02-20 Tue 16:05] =>  2:30
   SCHEDULED: <2018-02-11 周日>
   :END:
   [2018-02-11 周日 13:34]
*** Introduction
    [2018-02-20 Tue 15:35]

    In Emacs, execute =M-x calc= and you are in a =Calc= buffer. At first
    time, perhaps you will be confused how begin. Press =?= you will get a
    help manual.


    Normally, Calc uses the RPN (Reverse Polish Notation) notation, which
    is not the natation what I am familiar with. However, It did not take
    me much time to get used to it. Generally, the core of an RPN
    calculator is the stack. A calculator stack is like a stack of dishes.
    New dishes are added at the top of the stack, and numbers are normally
    only removed from the top of the stack. Also, in a RPN calculator,
    operands are always entered first, the operator second. The calculator
    pops the appropriate number of operands from the stack and pushes back
    the result.

    Take =2+3= for example, first, you enter 2;second , 3; at last, you
    enter =+= . Then the 2 and 3 pops from the stack and 5 are pushed on
    the top of the stack.
*** Main Features
    [2018-02-20 Tue 15:36]

    1. Choice of algebraic or RPN entry of calculations;
    2. Arbitrary precision integers and floating-point numbers.
    3. Arithmetic on rational numbers, complex numbers (rectangular and
       polar), error forms with standard deviations, open and closed
       intervals, vectors and matrices, dates and times, infinities, sets,
       quantities with units, and algebraic formulas.
    4. Mathematical operations such as logarithms and trigonometric
       functions.
    5. Programmer's features (bitwise operations, non-decimal numbers).
    6. Financial functions such as future value and internal rate of
       return.
    7. Number theoretical features such as prime factorization and
       arithmetic modulo m for any m.
    8. Algebraic manipulation features, including symbolic calculus.
    9. Moving data to and from regular editing buffers.
    10. Embedded mode for manipulating Calc formulas and data directly
        inside any editing buffer.
    11. Graphics using GNUPLOT, a versatile (and free) plotting program.
    12. Easy programming using keyboard macros, algebraic formulas,
        algebraic rewrite rules, or extended Emacs Lisp.

From the features listed above, we can see Calc is a versatile
calculator. It is almost impossible for me to touch all the features
during daily use. Calc is large and maybe intimidating to the
first-time user. My knowledge of Calc grows as time goes by. I use
Calc every time when I want to calculate something. Day by day, I
learn more and more about Calc.

This post is the record of my use of Calc.
*** switch between the algebraic and RPN mode
    [2018-02-20 Tue 16:02]

    =calc-algebraic-entry=

    This command is used to input an expression in the algebraic mode
    temporally. After this the Calc is in RPN mode. When you execute
    the =calc-algebraic-entry= the minibuffer will be leading by the
    word *Algebraic:* instead of *Calc:*, which is used in the RPN
    mode.

    After the *Algebraic:* you can enter your algebraic expression.

    In the Calc buffer, press ='= also bring you the algebraic mode.
    Press ='= two times bring you the last algebraic expression you
    entered.

    =calc-algebraic-mode=

    This command will turn the Calc into algebraic mode. After calling
    this command, every time you enter something in the Calc buffer,
    the Calc is in the algebraic mode i.e. every time you enter
    something , the minibuffer will be leading *Algebraic:* . So any
    algebraic expression is accepted. I even try the =2 + log10(100)=
    and it returns =4= .

*** adding two numbers
    [2018-02-20 Tue 15:57]

    In the RPN mode, you enter the first operand and the second
    operand, at last you enter =+= , then the first operand and the
    second operand pops out of the stack and the result is pushed
    back.

    subtraction, multiplication and divide are in a straightforward
    way.
*** reference
[2018-02-20 Tue 19:30]

1. [[http://nullprogram.com/blog/2009/06/23/][The Emacs Calculator.]]
2. [[https://www.gnu.org/software/emacs/manual/html_node/calc/index.html#Top][The manual: The GNU Emacs Calculator.]]


** DONE Write in Emacs                             :@Emacs:
CLOSED: [2018-02-20 Tue 22:13]
:PROPERTIES:
:EXPORT_FILE_NAME: write-in-emacs
:EXPORT_DATE: <2018-02-20 Mon 15:15>
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :summary "Write an article in Emacs"
:END:
:LOGBOOK:
- CLOSING NOTE [2018-02-20 Tue 22:13] \\
  done with a draft
  Thanks my wife for taking care of the new born baby and spare me so
  much time
  CLOCK: [2018-02-20 Tue 19:32]--[2018-02-20 Tue 22:13] =>  2:41
:END:

*** writing a book in Emacs
[2018-02-20 Tue 19:22]

I am not going to preach the powerful tool, Org. In this post, I want
to write something on the tools which facilitate the literature
writing. Indeed, if I am going to write a book someday (when time is
not a problem), the very tool I will adopt definitely is Emacs.

With high probability, I will adopt the [[https://www.masteringemacs.org/article/how-to-write-a-book-in-emacs][workflow like Mickey Petersen
did]]. Also, Emacs has many extensions that make writing a book or an
article in large size possible. In general, I will write it in Org
mode, and export the book to other format with just a =C-c C-e=, which
is a convenient shortcut memorized by my muscle.
*** Extensions that facilitate writing
[2018-02-20 Tue 19:24]
**** Working Environment

My working Environment is listed as below:
1. Windows 10 on Surface Pro 4;
2. Emacs 25.0.5;
3. Org 9.1.6;
4. Also, I use spacemacs, a comprehensive configuration with many
   functions organized as layers.

**** Org
[2018-02-20 Tue 19:29]

The Org mode, the killer extension, makes Emacs great again. I surely
did quite a few customization on Org. However, I use the org layer
shipped with spacemacs.

Also, you can [[http://www.howardism.org/Technical/Emacs/orgmode-wordprocessor.html][configure Org like a word processor]]. Org-bullet package
make Org mode beautiful. I set Org bullets as:
#+begin_src lisp
(setq org-bullets-bullet-list '("✿" "❀" "♣" "♧" ))
#+end_src

As mentioned before, you can export your Org file using several
formats such as HTML,TeX, PDF, Markdown and so on.

I use Org writing my own blog through [[https://github.com/kaushalmodi/ox-hugo][ox-hugo]]. Of course, I use Hugo.
Why not? Hugo is fast and disk-space-friend. Hugo also has its windows
distribution. ox-hugo export the org files as markdown files which are
supported by hugo.

I use Org to export PDF based on the latex class defined [[https://github.com/emacsun/org-article][org-article]]
,which is a latex class I forked from [[https://github.com/tsdye/org-article][tsdye/org-article]] and added the
support for Chinese characters. Org-article is a flexible latex class
and export beautiful PDF with the good-looking fonts and architecture.


**** Spell Checking
[2018-02-20 Tue 19:33]

Using flyspell, spell checking is easy. There is a layer named
spell-checking distributed with spacemacs.

I use aspell instead of ispell. So, I set:
#+begin_src lisp
(setq-default ispell-program-name "C:/Aspell/bin/aspell.exe")
#+end_src
Of course, you have to install aspell and the dictionaries. I use the
[[http://aspell.net/win32/][Win32 version]].

Using flyspell mode, you can also insert some word into your personal
dictionary.
**** Moving around
[2018-02-20 Tue 20:10]

Using Spacemacs, moving around is easy because it has almost all the
jumping shortcuts used in Vim (if you use the Vim mode in spacemacs).

On the other hand, using Org, you can jump from headline to headline
easily. Promoting and demoting a headline is also fast. You can even
change the head level of a headline using just a few keystrokes.

The =tab= key is a useful shortcut to change the face of how the Org
buffer looks like. I use the =tab= key to give me a sketch view of the
post I am working on. Furthermore, you can even use the narrow
function to restrict the buffer showing only the section of subsection
part you are working if your file is getting large and you don't want
to be distracted by other parts of your article.

Through the writing of this post, I also using the commands moving
around sentences and paragraphs often.
#+CAPTION: move around in Org files
#+NAME: tab:20180220movingaround
#+ATTR_HTML: :border 1 :rules all :frame border :align center
#+ATTR_LATEX: :align center
| commands  | description                                                |
|-----------+------------------------------------------------------------|
| =h,j,k,l= | the basic Vim keys, need no description                    |
| =0=       | goto the beginning of a line                               |
| =$=       | goto the end of a line                                     |
| =M-a=     | goto the beginning of a sentence                           |
| =M-e=     | goto the end of a sentence                                 |
| =M-k=     | move a paragraph up  when cursor stays in a paragraph     |
| =M-j=     | move a paragraph down when cursor stays in a paragraph     |
| =M-{=     | goto the beginning of previous paragraph                   |
| =M-}=     | goto the beginning of next paragraph                       |
In the Org mode, the following commands are also very convenient.

| =M-j=     | org metadown when cursor stays in a headline               |
| =M-k=     | org metaup when cursor stays in a headline                 |
| =<=       | promote a headline when cursor stays in a headline         |
| =>=       | demote a headline when cursor stays in a headline       |
| =C-c C-f= | goto the next headline of the same level           |
| =C-c C-b= | goto the previous headline of the same level               |
| =C-c C-n= | goto the next headline, not necessarily the same level     |
| =C-c C-p= | goto the previous headline, not necessarily the same level |

**** count words
[2018-02-20 Tue 20:12]

=count-words= is a command built in Emacs. There is a github
repository [[https://github.com/LdBeth/advance-words-count.el]["advance words count"]] which helps count the CJK word. If
you write in CJK language, it will be handy.
**** focus on current section
[2018-02-21 Wed 10:44]

Three handy functions help me focus on what I am working on.
1. the fullscreen =spacemacs/toggle-fullscreen-frame= which block
   distractions from other apps.
2. the org-capture which allow me capture the ideas or
   aspirations hitting my head.
3. the narrow function. This is extremely useful especially when
   your article or post have quite a lot sections. You can narrow
   your buffer to the very section you are working on.

*** Reference
[2018-02-20 Tue 22:11]

1. [[https://www.masteringemacs.org/article/how-to-write-a-book-in-emacs][how-to-write-a-book-in-emacs]]
2. [[https://www.reddit.com/r/emacs/comments/4kj7cv/emacs_for_writing_tell_me_your_tricks/][Emacs for writing ? Tell me your tricks !]]
3. [[http://www.tonyballantyne.com/EmacsWritingTips.html][My Emacs Writing Setup]] . This is an old post by Tony
   Ballantyne, a writer, whose blog http://tonyballantyne.com/
   provides a lot of information on how to write.
4. On [[http://irreal.org/blog/?p=4664][irreal.org]] , you can always find something unexpectedly.
5. [[https://ontologicalblog.com/2016/10/14/an-absolute-beginners-guide-to-spacemacs-for-academic-writing/][An Absolute Beginners Guide to Spacemacs for Academic Writing]]  .
   This post is a comprehensive guide for beginners using spacemacs. I
   learn quite a lot from it.
6. [[https://pandoc.org/][Pandoc]], the swiss-army knife for file format conversion.



** DONE Version Control Using Magit in Spacemacs :Emacs:git:@git:@Emacs:
   CLOSED: [2018-02-20 Tue 22:14]
:PROPERTIES:
:EXPORT_FILE_NAME: version-control-emacs-magit
:EXPORT_DATE: <2018-02-19 Mon 15:15>
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :summary "My Use of Magit in Spacemacs"
:END:
:LOGBOOK:
- CLOSING NOTE [2018-02-20 Tue 22:14] \\
  thank you my dear wife for taking care of the family, so that I could
  sit down to write this post.
CLOCK: [2018-02-19 Mon 16:10]--[2018-02-20 Tue 09:09] => 16:59
CLOCK: [2018-02-19 Mon 15:16]--[2018-02-19 Mon 15:45] =>  0:29
:END:

There is an [[http://spacemacs.org/layers/+source-control/git/README.html][official layer]] called [[http://spacemacs.org/layers/+source-control/git/README.html][=git=]]builtin spacemacs. The =git=
layer is based on =magit= . Actually, on the magit website, you can
always find what you want. This post is a summary of How I use magit
in spacemacs.

I like the magit website because of the beautiful font and pleasing
color combination. More important is the maintainor Jonas Bernoulli
who devotes his yearly efforts to coin the magit great for Emacsers.
Now, after [[https://www.kickstarter.com/projects/1681258897/its-magit-the-magical-git-client/posts/1988383][a successful campaign on the Kickstarter]], Jonas Bernoulli
was able to work on Magit full-time for another year, which was he'd
love to.

Lets's goto my daily use of Magit in Spacemacs. If you are not using
[[http://spacemacs.org/layers/+source-control/git/README.html][Spacemacs]], I highly recommend it for you.
*** Commit Your Changes
[2018-02-19 Mon 16:34]

Suppose you have already make some changes on a project version
controlled using Git, the next step is to stage the changes and then
commit the changes.

If your cursor are in the buffer of a file belonging to that project,
press =SPC g s= will bring you to the magit buffer of current project.

If your cursor are not in the buffer of a file belongint to that
project, using =SPC p p= goto the helm-projectile buffer, then move
cursor to the project, then press =M-g=, you will goto the magit
buffer of current project.

Taking my =.spacemacs.d= project for example, after some modifications
on the config, I want to commit the changes. The mentioned two ways
bring me to a magit buffer like this:
#+CAPTION:  magit buffer of my .spacemacs.d
#+ATTR_HTML:  :width 400 :align center
#+NAME: fig:20180219magitbuffer1
#+ATTR_LATEX: :width 0.6\textwidth :align center
[[../static/img/tools/20180219magitbuffer1.png]]

From the above buffer, it records that I have one untracted file and
two unstaged changes on two existing files. On the headlines of the
untracted files and unstaged changes, press =s= will stage all the
untracted files and unstaged changes. If you are not at the headlines,
to stage all the changes you need to press =S=. After this, the buffer
become:

#+CAPTION:   press =s= to stage the changes
#+ATTR_HTML:  :width 400 :align center
#+NAME: fig:20180219magitbuffer2
#+ATTR_LATEX: :width 0.6\textwidth :align center
[[../static/img/tools/20180219magitbuffer2.png]]
If you regret, press =u= to unstage the changes. If you want to
commit, just press =c=, you will get a menu.


#+CAPTION:   press =c=  to commit
#+ATTR_HTML:  :width 400 :align center
#+NAME: fig:20180219magitbuffer3
#+ATTR_LATEX: :width 0.6\textwidth :align center
[[../static/img/tools/20180219magitbuffer3.png]]

The menu is clear for you to choose. If nothing to change, just press
=c= again, and there will a buffer pop up for you to take some notes
on this commit. Also, there is a buffer showing the diff of this
commit. If you regret at this moment, just press =C-c C-k= to abort
the commit.

#+CAPTION:   press =c= to commit
#+ATTR_HTML:  :width 400 :align center
#+NAME: fig:20180219magitbuffer4
#+ATTR_LATEX: :width 0.6\textwidth :align center
[[../static/img/tools/20180219magitbuffer4.png]]

After finishing the notes, press =C-c C-c= to finish the commit. you
are in a buffer showing the current state of the project.

#+CAPTION:   after commit
#+ATTR_HTML:  :width 400 :align center
#+NAME: fig:20180219magitbuffer5
#+ATTR_LATEX: :width 0.6\textwidth :align center
[[../static/img/tools/20180219magitbuffer5.png]]

It shows that I am ahead one commit of the remote/master. So, If you
want to push the commit to the remote/master, press =p= , a buffer
will popup for you to choose where to push.

#+CAPTION:   press =u=  to push
#+ATTR_HTML:  :width 400 :align center
#+NAME: fig:20180219magitbuffer6
#+ATTR_LATEX: :width 0.6\textwidth :align center
[[../static/img/tools/20180219magitbuffer6.png]]

Press =u= to push the commit to the origin/master, and you get:
#+CAPTION:   after pushing to the origin/master
#+ATTR_HTML:  :width 400 :align center
#+NAME: fig:20180219magitbuffer7
#+ATTR_LATEX: :width 0.6\textwidth :align center
[[../static/img/tools/20180219magitbuffer7.png]]

Then a commit is finished locally and remotely.








** DONE Journal your life Using Emacs Org  :journal:@Emacs:
CLOSED: [2018-02-25 Sun 19:46]
   :PROPERTIES:
   :EXPORT_FILE_NAME: journal-your-life-using-emacs-org
   :EXPORT_DATE: <2018-02-20 Tue 22:21>
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :summary "journal your work using Emacs Org"
   :END:
   :LOGBOOK:
   CLOCK: [2018-02-21 Wed 07:47]--[2018-02-21 Wed 09:04] =>  1:17
   CLOCK: [2018-02-20 Tue 22:23]--[2018-02-20 Tue 22:29] =>  0:06
   :END:
*** Introduction
    [2018-02-21 Wed 07:48]

    Long time ago, I read a post about [[https://www.emacswiki.org/emacs/PersonalDiary][taking daily journal using Emacs]].
    Until recently, I realized that I need to take journals on my work.
    So I read the post again and integrate the configuration into my
    .spacemacs.d.

    In general, I use this journal system to note down my work. This
    journal system is simple and easy to use and maintain.

    Here, I am not going to preach why you should keep a daily
    journal. Google will tell you more.

*** Install
    [2018-02-21 Wed 07:48]

    If you want to Install the org-journal layer, just clone my
    [[https://github.com/emacsun/.spacemacs.d][.spacemacs.d]] there is a layer named =zcljournal=, which is forked
    from [[https://github.com/borgnix/spacemacs-journal][spacemacs-journal]] with a little modified.

    To use this journal system, you need set =org-journal-dir=:
    #+begin_src lisp
    (setq org-journal-dir "~/.spacemacs.d/journal/")
    #+end_src
*** Keys
    [2018-02-21 Wed 07:58]


**** Global Bindings
     | Key Binding | Description                                      |
     |-------------+--------------------------------------------------|
     | ~SPC a j j~ | new journal entry                                |
     | ~SPC a j v~ | view journal of today                            |
     | ~SPC a j s~ | search journals within a specified time interval |
     | ~SPC a j S~ | search all journal for a string                 |
**** Major Mode Bindings
     | Key Binding | Description                     |
     |-------------+---------------------------------|
     | ~SPC m j j~ | new journal entry               |
     | ~SPC m j n~ | next journal file               |
     | ~SPC m j p~ | previous journal file           |
     | ~SPC m j s~ | search the current journal file |
     | ~SPC m j v~ | read journal entry              |
     | ~SPC m j V~ | display journal entry           |
     | ~SPC m j S~ | search all journals             |
     | ~SPC m j w~ | search calendar week            |
     | ~SPC m j m~ | search calendar month           |
     | ~SPC m j y~ | search calendar year            |

     Also, you can replace the prefix ~SPC m~ with ~,~ which is more
     handy.


**** Calendar Mode Bindings
     | Key Binding | Description                                |
     |-------------+--------------------------------------------|
     | ~J j~       | new journal entry                          |
     | ~J v~       | view an entry in a new buffer              |
     | ~J V~       | view an entry but do not switch to it      |
     | ~J n~       | go to next day with journal entries        |
     | ~J p~       | go to previous day with journal entries    |
     | ~J S~       | search in all entries of all time          |
     | ~J w~       | search in all entries of the current week  |
     | ~J m~       | search in all entries of the current month |
     | ~J y~       | search in all entries of the current year  |
*** Take a Journal
    [2018-02-21 Wed 09:31]

    After setting, you can take journal anywhere and anytime. In the
    buffer not in =Org= mode, =SPC a j j= will generate and new
    journal entry. In =Org= mode, =SPC m j j= or =, j j= will also
    bring a new journal entry.
*** Browse Your Journal
    [2018-02-21 Wed 10:06]

    To browse your journal, you'd better in the Calendar buffer using
    =calendar= which I bind to =SPC o C= . In this buffer, press =J=
    there will be a menu popping up for you.
    [[../static/img/tools/20180221orgjournal.png]]

    As you can see, the day with a journal is highlighted in yellow (
    you can custom it to other colors ).

   | keys  | description                           |
   |-------+---------------------------------------|
   | ~J n~ | jump to next day having a journal     |
   | ~J p~ | jump to previous day having a journal |
   | ~J v~ | display journal of current day        |

*** Search Your Journal
    [2018-02-21 Wed 09:34]

    The key I use most is =org-journal-search-forever= which I bind to
    =SPC a j S= and you can search all your journals anytime and
    anywhere. You can also search a certain period by =SPC a j s=
    with which you need to enter the begin and end of the period in
    the minibuffer.


    There are other search options which allow you search in a week,
    month and a year. However, to search your journal in a week, a
    month and a year, you need in the Calendar buffer.

*** After a Period
    [2018-02-21 Wed 08:50]

    After a Period, say a month, there are quite a lot journals under
    the =org-journal-dir= . One day One journal.
** DONE Take a Diary Using Emacs Org     :Org:diary:@Emacs:
CLOSED: [2018-02-25 Sun 19:47]
   :PROPERTIES:
   :EXPORT_FILE_NAME: take-a-diary-using-emacs-org
   :EXPORT_DATE: <2018-02-21 Wed 09:03>
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :summary "keep a diary using Emacs Org"
   :END:
   :LOGBOOK:
   CLOCK: [2018-02-21 Wed 09:04]--[2018-02-21 Wed 09:16] =>  0:12
   :END:
*** Introduction
    [2018-02-21 Wed 09:06]

    There is one diary system built in Emacs. When you are in the
    Calendar buffer, press =i= will bring you a menu to select what
    kind of diary you want to take. However, as a loyal fan of Emacs
    Org, I want to take diary using Org.

    When I am in the org agenda buffer, press =i= will bring me a menu
    like what show in the calendar buffer after pressing =i=.
*** Set up
    [2018-02-21 Wed 09:09]

    It seems that all you need to do is set the =org-agenda-diary-file=,
      so that Org knows where to put the diary file.

      #+begin_src lisp
      (setq org-agenda-diary-file  "~/zorg/Dropbox/base/zdiary.org")
      #+end_src

      After this, everything is left for Org mode. All you have to do
      is writing your diary.


* TODO Git
[2018-01-28 Sun 10:14]


bibliography:~/zorg/research_library/zcl.bib
bibliographystyle:unsrt
